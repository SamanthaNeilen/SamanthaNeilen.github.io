<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-24T17:36:54+01:00</updated><id>http://localhost:4000/</id><title type="html">Samantha Neilen</title><subtitle>My name is Samantha Neilen, a dutch .Net developer.  I have been coding professionaly since 2008. On this blog I will be writing about multiple subjects that I use in my daily programming job or subjects that I am studying.</subtitle><entry><title type="html">Managing a SQL Server database from a Visual Studio Database project</title><link href="http://localhost:4000/2017/11/24/managing-a-sql-server-database-from-a-visual-studio-database-project.html" rel="alternate" type="text/html" title="Managing a SQL Server database from a Visual Studio Database project" /><published>2017-11-24T00:00:00+01:00</published><updated>2017-11-24T00:00:00+01:00</updated><id>http://localhost:4000/2017/11/24/managing%20a%20sql%20server%20database%20from%20a%20visual%20studio%20database%20project</id><content type="html" xml:base="http://localhost:4000/2017/11/24/managing-a-sql-server-database-from-a-visual-studio-database-project.html">&lt;p&gt;
	When building an application I also want to manage changes to the database from source control. One of the ways of doing this is with a Visual Studio SQL Server Database project. It integrates well with source control and can be integrated in automatic deployments.
&lt;/p&gt;
&lt;p&gt;
	All screenshots and used techniques that are written in this post are available within Visual Studio 2017 community edition and SQL Server 2017 express edition that are both free downloads.
&lt;/p&gt;
&lt;p&gt;
	The SQL Server Database project type can be found in the New Project window under de SQL Server templates as shown below:&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/DatabaseProject.png&quot; alt=&quot;Database Project&quot; /&gt;
&lt;p&gt;
&lt;p&gt;
	This project will just create an empty project without any objects.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/EmptyDatabaseProjectSolution.png&quot; alt=&quot;Empty Database Project Solution Explorer&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	You can now start to adding new items like tables, views, stored procedures and all kinds of other SQL Server database objects. A good practice is to put these objects into folders representing the different database objects for better maintainability.
	You can also import objects from an existing database by right clicking on the project and select Import from the available options ( the import database and dacpac options are only available when the database project is still empty).
&lt;/p&gt; 
&lt;p&gt;
	When creating an object like a table, Visual Studio will show an editor as shown in the image below. You can leverage the designer combined with the properties window to define fields and column settings or just type in the SQL statements in the T-SQL window on the lower left side.
	Below you can see an example of how I created a simple Customer table.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/DesignView.png&quot; alt=&quot;Designer View Visual Studio&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	After creating or changing objects in your project you can publish these changes to a database with the Schema Compare option in the project context menu.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareContextMenu.png&quot; alt=&quot;Schema Compare Context Option&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	Use the select target drop down to go through the dialogs to select the database that you want to publish to.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareSelectTarget.png&quot; alt=&quot;Schema Compare Select Target&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	After selecting the database the Compare button on the upper left will become enabled and you can click it to kick off the compare between your database and the project. You can click on an object to see the changes between the specific objects.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareTableChanges.png&quot; alt=&quot;Schema Compare Table changes&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	If you want to update the database to reflect the changes made, click the update button. You can deselect unwanted changes with the checkboxes in the Action column of the SchemaCompare tab. Visual Studio will show if the changes were successful and give you some options to view details.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareUpdateSuccesful.png&quot; alt=&quot;Schema Compare Update Succesful&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	When the update fails, when you for example add a new non nullable column without a default value or deleting a column with data, the results will show like below:&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareUpdateFailed.png&quot; alt=&quot;Schema Compare Update Failed&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	By clicking View Results you see the script that was run but also a tab that shows the message of what went wrong.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareUpdateFailedMessage.png&quot; alt=&quot;Schema Compare Update Failed Message&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	You can either force the data loss by changing the schema compare options via the gear icon of the schema compare tab  as shown below or run an update script to mitigate the data loss.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/SchemaCompareOptions.png&quot; alt=&quot;Schema Compare Options&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	In my case I had a faulty existing Countr column that did not match a newly created Country column. To get schema compare to update my database I had to created a data migration pre-upgrade script as shown below.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Countr'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.Customer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Country'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.Customer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NVARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
 
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UPDATE Customer SET Country = Countr'&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
	&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Countr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	The update is a dynamic statement  because the script will not compile with a column name that does not exist before the upgrade script has been run. Notice that the IF statement is very specific to this change in the database. This is because we can add this script as a Pre-Deployment Script to the database project.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/ScriptFileOptions.png&quot; alt=&quot;Script File Options&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	Even if we have to run the script manually when using a schema compare, Pre- and Post-Deployment scripts will be run automatically when running the database project (F5) on a database, or when deploying the bacpac file that is the output of this project (found in the bin folder after building the project). The connection string that is used when running/debugging the project can be found and changed in the properties pages of the project in the Debug tab. There is also a SQL Script in the output folder that can be used to upgrade a database. The Pre- and Post-Deployment scripts are contained within the SQL script that is the output of the project.&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/ProjectPropertyPages.png&quot; alt=&quot;Project Property Pages&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	Once all known instances of the database are updated with the specific Pre-Deployment script. It can be removed to avoid clutter of the project. 
	The specific IF statement will ensure that the statements are only run on a database that can do the specific data migration and skips it when creating a completely new instance.
&lt;/p&gt;
&lt;p&gt;
	These projects are really only for managing schema information not data. If you want to secure your data, you need to create regular (scheduled) backups of your database. 
	We can use Post-Deployment scripts to add seed data to tables when they are empty. An example is show below:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emailadress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phonenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Housenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HousenumberExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zipcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'My test customer 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'company@testcompany1.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0123456789'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TestStreet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1111AA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TestCity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TestCountry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emailadress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phonenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Housenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HousenumberExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zipcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'My test customer 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'info@somecompany.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0112233445'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SomeStreet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5555UD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SomeCity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TestCountry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emailadress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phonenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Housenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HousenumberExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zipcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'My test customer 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'company3@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0997654432'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'StreetStuff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'8261SK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CityStuff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TestCountry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	So now we have project that can be plugged into source control. All the objects are stored as SQL files and work well in source control comparing and merging.
	If you have any manual scripts, that you might want to run periodicly, store them with the solution in a seperate solution items folder so they will not be compiled into the project output.
&lt;/p&gt;
&lt;p&gt;
	The dacpac files that are the output of the project can be used by an automated or manual deployment process to change the databases in your environments. Once you update the database, it will remember the version of the dacpac used to update the database. The project has a refactorlog file reflecting all changes made in a sequential form. Once  a dacpac version has been applied with the changes and you want to run the dacpac again after making manual modifications to the database, it will not be able to restore properly to the intended database state .This is why during development you will usually be using the Schema Compare functionality and running 
	Pre- and Post-Deployment scripts manually untill all changes are ready and the dacpac reflecting the next sequential update will be pushed out to your testing and eventualy production environments.
&lt;/p&gt;
&lt;p&gt;
	If you have a dacpac file you can deploy it in manually in SQL Server Management Studio with the option below for a new database:&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/ManagementStudioDeploy.png&quot; alt=&quot;SQL Management Studio Deploy&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	Or use the option below on an existing database to upgrade it:&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171124/ManagementStudioUpgrade.png&quot; alt=&quot;SQL Management Studio Upgrade&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
	If you are using VSTS for authomatic deployments, you can add a step to deploy dacpac files.
&lt;/p&gt;
&lt;p&gt;
	Below are some references to documentation about the topics discussed in this post:&lt;br /&gt;
	&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications&quot; target=&quot;_blank&quot;&gt;Microsoft Docs page for data-tier applications&lt;/a&gt; &lt;br /&gt;
	&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/data-tools/creating-and-managing-databases-and-data-tier-applications-in-visual-studio&quot; target=&quot;_blank&quot;&gt;Microsoft Docs page for database projects&lt;/a&gt;
&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><category term="VisualStudio" /><category term="SQLServer" /><summary type="html">When building an application I also want to manage changes to the database from source control. One of the ways of doing this is with a Visual Studio SQL Server Database project. It integrates well with source control and can be integrated in automatic deployments. All screenshots and used techniques that are written in this post are available within Visual Studio 2017 community edition and SQL Server 2017 express edition that are both free downloads. The SQL Server Database project type can be found in the New Project window under de SQL Server templates as shown below: This project will just create an empty project without any objects. You can now start to adding new items like tables, views, stored procedures and all kinds of other SQL Server database objects. A good practice is to put these objects into folders representing the different database objects for better maintainability. You can also import objects from an existing database by right clicking on the project and select Import from the available options ( the import database and dacpac options are only available when the database project is still empty). When creating an object like a table, Visual Studio will show an editor as shown in the image below. You can leverage the designer combined with the properties window to define fields and column settings or just type in the SQL statements in the T-SQL window on the lower left side. Below you can see an example of how I created a simple Customer table. After creating or changing objects in your project you can publish these changes to a database with the Schema Compare option in the project context menu. Use the select target drop down to go through the dialogs to select the database that you want to publish to. After selecting the database the Compare button on the upper left will become enabled and you can click it to kick off the compare between your database and the project. You can click on an object to see the changes between the specific objects. If you want to update the database to reflect the changes made, click the update button. You can deselect unwanted changes with the checkboxes in the Action column of the SchemaCompare tab. Visual Studio will show if the changes were successful and give you some options to view details. When the update fails, when you for example add a new non nullable column without a default value or deleting a column with data, the results will show like below: By clicking View Results you see the script that was run but also a tab that shows the message of what went wrong. You can either force the data loss by changing the schema compare options via the gear icon of the schema compare tab as shown below or run an update script to mitigate the data loss. In my case I had a faulty existing Countr column that did not match a newly created Country column. To get schema compare to update my database I had to created a data migration pre-upgrade script as shown below. IF EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'Countr' AND Object_ID = Object_ID(N'dbo.Customer')) AND NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'Country' AND Object_ID = Object_ID(N'dbo.Customer')) BEGIN ALTER TABLE Customer ADD Country NVARCHAR(100) NULL DECLARE @sqlCommand varchar(1000) = 'UPDATE Customer SET Country = Countr' EXEC(@sqlCommand) ALTER TABLE Customer DROP Countr END The update is a dynamic statement because the script will not compile with a column name that does not exist before the upgrade script has been run. Notice that the IF statement is very specific to this change in the database. This is because we can add this script as a Pre-Deployment Script to the database project. Even if we have to run the script manually when using a schema compare, Pre- and Post-Deployment scripts will be run automatically when running the database project (F5) on a database, or when deploying the bacpac file that is the output of this project (found in the bin folder after building the project). The connection string that is used when running/debugging the project can be found and changed in the properties pages of the project in the Debug tab. There is also a SQL Script in the output folder that can be used to upgrade a database. The Pre- and Post-Deployment scripts are contained within the SQL script that is the output of the project. Once all known instances of the database are updated with the specific Pre-Deployment script. It can be removed to avoid clutter of the project. The specific IF statement will ensure that the statements are only run on a database that can do the specific data migration and skips it when creating a completely new instance. These projects are really only for managing schema information not data. If you want to secure your data, you need to create regular (scheduled) backups of your database. We can use Post-Deployment scripts to add seed data to tables when they are empty. An example is show below: IF NOT EXISTS(SELECT TOP(1) [Name] FROM Customer) BEGIN INSERT INTO Customer ([Name],[Emailadress],[Phonenumber],[Street], [Housenumber], [HousenumberExtension], [Zipcode], [City], [Country]) VALUES ('My test customer 1', 'company@testcompany1.com', '0123456789', 'TestStreet', 4, NULL, '1111AA', 'TestCity', 'TestCountry'); INSERT INTO Customer ([Name],[Emailadress],[Phonenumber],[Street], [Housenumber], [HousenumberExtension], [Zipcode], [City], [Country]) VALUES ('My test customer 2', 'info@somecompany.com', '0112233445', 'SomeStreet', 2, 'a', '5555UD', 'SomeCity', 'TestCountry'); INSERT INTO Customer ([Name],[Emailadress],[Phonenumber],[Street], [Housenumber], [HousenumberExtension], [Zipcode], [City], [Country]) VALUES ('My test customer 3', 'company3@test.com', '0997654432', 'StreetStuff', 4, NULL, '8261SK', 'CityStuff', 'TestCountry'); END So now we have project that can be plugged into source control. All the objects are stored as SQL files and work well in source control comparing and merging. If you have any manual scripts, that you might want to run periodicly, store them with the solution in a seperate solution items folder so they will not be compiled into the project output. The dacpac files that are the output of the project can be used by an automated or manual deployment process to change the databases in your environments. Once you update the database, it will remember the version of the dacpac used to update the database. The project has a refactorlog file reflecting all changes made in a sequential form. Once a dacpac version has been applied with the changes and you want to run the dacpac again after making manual modifications to the database, it will not be able to restore properly to the intended database state .This is why during development you will usually be using the Schema Compare functionality and running Pre- and Post-Deployment scripts manually untill all changes are ready and the dacpac reflecting the next sequential update will be pushed out to your testing and eventualy production environments. If you have a dacpac file you can deploy it in manually in SQL Server Management Studio with the option below for a new database: Or use the option below on an existing database to upgrade it: If you are using VSTS for authomatic deployments, you can add a step to deploy dacpac files. Below are some references to documentation about the topics discussed in this post: Microsoft Docs page for data-tier applications Microsoft Docs page for database projects</summary></entry><entry><title type="html">Starting my blog</title><link href="http://localhost:4000/2017/11/18/starting-my-blog.html" rel="alternate" type="text/html" title="Starting my blog" /><published>2017-11-18T08:46:41+01:00</published><updated>2017-11-18T08:46:41+01:00</updated><id>http://localhost:4000/2017/11/18/starting%20my%20blog</id><content type="html" xml:base="http://localhost:4000/2017/11/18/starting-my-blog.html">&lt;p&gt;
	I would like to start my blog with a post of how I set up this blog. 
&lt;p&gt;
&lt;p&gt;
	When you start a Github account you can use a repository with the name username.github.io to host a website. That website will be hosted at the url &lt;a href=&quot;#&quot;&gt;https://username.github.com&lt;/a&gt;. These websites on Github are called Github Pages. You can also create a website for a specific repository. Seeing as you can create a free Github account as long as you don't want or need private repositories, this is a great way to host a blog or website for free. For more information see &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;Github Pages&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
	Github pages promotes Jekyll as a tool to build static websites. It's not officially supported from windows but so for installing it and running it on my Windows 10 (2017 Fall Creators Update) has worked out fine so far.
	See &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;the Jekyll website&lt;/a&gt; for installation instructions.
&lt;/p&gt;
&lt;p&gt;
There were a few points in the installation that I had to look up because of my unfamiliarity with Linux so I've included a description below of the steps taken after installing the Ubuntu store app from windows.
&lt;/p&gt;
&lt;h3&gt;Installing Jekyll on windows10&lt;/h3&gt;
&lt;p&gt;
After I installed the Ubuntu app and started it as an Administrator I got an error. The link in the error shows you to the MSDN page explaining that you have to run a Powershell command to actually enable the Linux subsystem for Windows.
For more information see: &lt;a href=&quot;https://msdn.microsoft.com/en-us/commandline/wsl/install-win10&quot; target=&quot;_blank&quot;&gt;Install the Windows Subsystem for Linux&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The command that needs to be run (as administrator in Powershell) was:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Enable-WindowsOptionalFeature &lt;span class=&quot;nt&quot;&gt;-Online&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-FeatureName&lt;/span&gt; Microsoft-Windows-Subsystem-Linux&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
	After the reboot start the Ubuntu terminal app again as administrator. It will now show the screen below:&lt;br /&gt;
	&lt;img src=&quot;/assets/images/20171118/UbuntuInstallingMessage.png&quot; alt=&quot;Ubuntu Installing Message&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
The terminal actually froze up for me the first time here, so if it's not continuing after a few minutes, just close and restart the app. (This may happen a few times when configuring the shell or downloading and updating the packages needed to install Jekyll. Also sometimes the editor seems to not take keyboard input when prompted to press enter or cntrl-c, when that happens click a few times within the editor to get the focus back correctly in the terminal and it will accept the command.)
&lt;/p&gt;
&lt;p&gt;
When it's done, you will see an active command line with root@computername:~#&lt;br /&gt;
Enter the command below to start bash (the Jekyll website just stated bash without the sudo keyword but the sudo keyword is needed).

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
It may prompt you for a username and password. (Be aware you will need that password every time you start up bash. Also the text cursor will not show any signs off accepting input like stars or underscores but it will register your keystrokes). I have installed the terminal on 2 different computers. On one I did not get prompted for the separate login on the other I did need it.
&lt;/p&gt;
&lt;p&gt;
Run the commands as provided on the Jekyll site for &lt;a href=&quot;https://jekyllrb.com/docs/windows/&quot; target=&quot;_blank&quot;&gt;the installation on windows&lt;/a&gt;. When it shows multiple commands in one code block run them per command and don't paste them in all at once). 
&lt;/p&gt;
&lt;p&gt;
Also it may give the message below. You can continue by pressing enter and run the next command when it finishes. &lt;br /&gt;
&lt;img src=&quot;/assets/images/20171118/BrightboxRubyMessage.png&quot; alt=&quot;BrightBox Ruby Message&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
After all the commands have run and Jekyll is returning a version number you can navigate to a windows folder to create your first Jekyll website. The Ubuntu terminal is run from a separate sub filesystem so you need to enter the command below to navigate to your C:\ drive. 

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt/c/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
From the C:\ directory you can just use the &quot;dir&quot; and &quot;cd&quot; commands to navigate to the appropriate folder the same way you would in a Windows command prompt. To create a new Jekyll website within your current folder use the command below. (note that you do not need to use the sudo keyword any more.)

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
After it has finished you have a working default website that you van run with the command below.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;h3&gt;Customising your site&lt;/h3&gt;
&lt;p&gt;
You can now add pages like the one already generated in your _posts folder and alter the _config.yml file to populate the contents of your generated site.
&lt;/p&gt;
&lt;p&gt;
Every time you make a change when Jekyll serve command is active or when you issue a Jekyll build command the contents of the _site folder get updated with the generated HTML site that you can access with your browser. This is also the content you can upload to your Git repository and thus will be hosted on your username.github.io website.&lt;br /&gt;
&lt;img src=&quot;/assets/images/20171118/JekyllDefaultPage.png&quot; alt=&quot;Jekkyl Default Page&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
As you may notice the default site is quite barren but you do not see the files for the page layouts or the stylesheets. These files can be found in the folder that holds the default theme. It was installed with the other bundles in the Ubuntu terminal. As stated in the &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;Jekyll documentation&lt;/a&gt; ( you can find out where those files are located with the command below.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;bundle show minima&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
You can copy the files from the theme folder and copy them into the folder of your Jekyll page to completely customize them. However the files installed by the Linux terminal are installed in a folder in your AppData folder. To access them from a windows explorer you need to enable hidden folders in your folder options and search for the &quot;gem&quot; in your %Users%\User\AppData folder to locate the installed ruby packages (including the minima package)
&lt;/p&gt;
&lt;p&gt;
Some great references on how to customize your pages are:
&lt;ul&gt;
	&lt;li&gt;
	&lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot; target=&quot;_blank&quot;&gt;Jekyll template documentation&lt;/a&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;a href=&quot;https://shopify.github.io/liquid/&quot; target=&quot;_blank&quot;&gt;Liquid template language&lt;/a&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;a href=&quot;https://gist.github.com/smutnyleszek/9803727&quot; target=&quot;_blank&quot;&gt;Liquid for Github pages cheatcheat&lt;/a&gt; 
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
After customizing your site template you can just worry about creating content pages. Any changes you make to your template at a later time will be reflected over all pages in the site. When uploading changes to your site repository, it may take a minute or so before changes are reflected in the browser.
The files used to generate the content for this blog can be found at &lt;a href=&quot;https://github.com/SamanthaNeilen/JekyllBlog&quot; target=&quot;_blank&quot;&gt;https://github.com/SamanthaNeilen/JekyllBlog&lt;/a&gt;.
&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><category term="Blog" /><category term="Jekyll" /><summary type="html">I would like to start my blog with a post of how I set up this blog. When you start a Github account you can use a repository with the name username.github.io to host a website. That website will be hosted at the url https://username.github.com. These websites on Github are called Github Pages. You can also create a website for a specific repository. Seeing as you can create a free Github account as long as you don't want or need private repositories, this is a great way to host a blog or website for free. For more information see Github Pages. Github pages promotes Jekyll as a tool to build static websites. It's not officially supported from windows but so for installing it and running it on my Windows 10 (2017 Fall Creators Update) has worked out fine so far. See the Jekyll website for installation instructions. There were a few points in the installation that I had to look up because of my unfamiliarity with Linux so I've included a description below of the steps taken after installing the Ubuntu store app from windows. Installing Jekyll on windows10 After I installed the Ubuntu app and started it as an Administrator I got an error. The link in the error shows you to the MSDN page explaining that you have to run a Powershell command to actually enable the Linux subsystem for Windows. For more information see: Install the Windows Subsystem for Linux. The command that needs to be run (as administrator in Powershell) was: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux After the reboot start the Ubuntu terminal app again as administrator. It will now show the screen below: The terminal actually froze up for me the first time here, so if it's not continuing after a few minutes, just close and restart the app. (This may happen a few times when configuring the shell or downloading and updating the packages needed to install Jekyll. Also sometimes the editor seems to not take keyboard input when prompted to press enter or cntrl-c, when that happens click a few times within the editor to get the focus back correctly in the terminal and it will accept the command.) When it's done, you will see an active command line with root@computername:~# Enter the command below to start bash (the Jekyll website just stated bash without the sudo keyword but the sudo keyword is needed). sudo bash It may prompt you for a username and password. (Be aware you will need that password every time you start up bash. Also the text cursor will not show any signs off accepting input like stars or underscores but it will register your keystrokes). I have installed the terminal on 2 different computers. On one I did not get prompted for the separate login on the other I did need it. Run the commands as provided on the Jekyll site for the installation on windows. When it shows multiple commands in one code block run them per command and don't paste them in all at once). Also it may give the message below. You can continue by pressing enter and run the next command when it finishes. After all the commands have run and Jekyll is returning a version number you can navigate to a windows folder to create your first Jekyll website. The Ubuntu terminal is run from a separate sub filesystem so you need to enter the command below to navigate to your C:\ drive. cd /mnt/c/ From the C:\ directory you can just use the &quot;dir&quot; and &quot;cd&quot; commands to navigate to the appropriate folder the same way you would in a Windows command prompt. To create a new Jekyll website within your current folder use the command below. (note that you do not need to use the sudo keyword any more.) jekyll new . After it has finished you have a working default website that you van run with the command below. jekyll serve Customising your site You can now add pages like the one already generated in your _posts folder and alter the _config.yml file to populate the contents of your generated site. Every time you make a change when Jekyll serve command is active or when you issue a Jekyll build command the contents of the _site folder get updated with the generated HTML site that you can access with your browser. This is also the content you can upload to your Git repository and thus will be hosted on your username.github.io website. As you may notice the default site is quite barren but you do not see the files for the page layouts or the stylesheets. These files can be found in the folder that holds the default theme. It was installed with the other bundles in the Ubuntu terminal. As stated in the Jekyll documentation ( you can find out where those files are located with the command below. bundle show minima You can copy the files from the theme folder and copy them into the folder of your Jekyll page to completely customize them. However the files installed by the Linux terminal are installed in a folder in your AppData folder. To access them from a windows explorer you need to enable hidden folders in your folder options and search for the &quot;gem&quot; in your %Users%\User\AppData folder to locate the installed ruby packages (including the minima package) Some great references on how to customize your pages are: Jekyll template documentation Liquid template language Liquid for Github pages cheatcheat After customizing your site template you can just worry about creating content pages. Any changes you make to your template at a later time will be reflected over all pages in the site. When uploading changes to your site repository, it may take a minute or so before changes are reflected in the browser. The files used to generate the content for this blog can be found at https://github.com/SamanthaNeilen/JekyllBlog.</summary></entry></feed>